clc
clear
close all

% load("MatricesLeidas.mat")
load('BEAMS.mat')

w = 2*pi*(1:1:2000);
nodes = length(nodes1)+length(nodes2)-1;

nret = 111;          % Todos los modos son 111

if nret < 109
    nret = nret + 2;
end 

M = zeros(nodes);
K = zeros(nodes);

M(1:51,1:51) = M1;
M(51:end,51:end) = M2;
M(51,51) = M1(51,51) + M2(1,1);

K(1:51,1:51) = K1;
K(51:end,51:end) = K2;
K(51,51) = K1(51,51) + K2(1,1);

%% C-B %% 

Mff = [M(1, 1),0; 0, M(end, end)];
Mfi = [M(1, 2:end-1); M(end, 2:end-1)];
Mif = [M(2:end-1, 1), M(2:end-1, end)];
Mii = M(2:end-1, 2:end-1);
Kff = [K(1, 1),0; 0, K(end, end)];
Kfi = [K(1, 2:end-1); K(end, 2:end-1)];
Kif = [K(2:end-1, 1), K(2:end-1, end)];
Kii = K(2:end-1, 2:end-1);

M_cb = [Mff Mfi;Mif Mii];
K_cb = [Kff Kfi; Kif Kii];

Phi_s = [eye(size(Kff,1)) ; -inv(Kii)*Kif];

[Phi_ip, D] = eig(Mii\Kii);

omega = zeros(1,109);
f = zeros(1,109);
Phi_ip_ord = zeros(109,109);

for i = 1:109
    omega(i) = sqrt(D(i,i));
    f(i) = omega(i)/(2*pi());
end
[f,I] = sort(f);
 
for i =1:109
    Phi_ip_ord(:,i) = Phi_ip(:,I(i));
end

Phi_i = [zeros(2,109) ; Phi_ip_ord];

% La matriz de CB queda:

Phi_CB = [Phi_s Phi_i];
Phi_CB = Phi_CB(:,1:nret);

% Transformar matrices de masa y rigidez:
M_CB = abs(Phi_CB'*M_cb*Phi_CB);
K_CB = abs(Phi_CB'*K_cb*Phi_CB);
   
p_cb = zeros(nodes,1);
p_cb(27) = -1;
p_cb = Phi_CB'*p_cb;

u_cb = zeros(length(w),length(p_cb));   % Todos los desplazamientos, frontera e interiores
q_cb = zeros(length(w),nodes);
v_rms_cb = zeros(1,length(w));
v_cb = zeros(length(w),nodes-2); % Velocidades, sÃ³lo interiores

M_CB(1:2,:) = [];
M_CB(:,1:2) = [];
K_CB(1:2,:) = [];
K_CB(:,1:2) = [];
p_cb(1:2,:) = [];

for i = 1:length(w)
        u_cb(i,:) = [0, 0, ((K_CB - (w(i)^2)*M_CB)\p_cb)'];
        q_cb(i,:) = Phi_CB*u_cb(i,:)';
        v_cb(i,:) = q_cb(i,3:end).*w(i)/(2*pi)*1000;
        v_rms_cb(i) = log10(sqrt(sum(v_cb(i,:).^2)/(size(v_cb,2)))); 
end

%% FEM %% 
Mfem = Mii; Kfem = Kii;
pfem = zeros(length(Kfem),1);
pfem(25) = -1;

[autovector, autovalor] = eig(Kfem,Mfem);
[d,ind] = sort(diag(autovalor));
autovalor_s = autovalor(ind,ind);
autovector_s = autovector(:,ind);
frec_nat = real(sqrt(diag(autovalor_s(1:20,1:20))));
modos_p = autovector_s(:,1:5);

u_fem = zeros(length(w),length(pfem));
v_fem = zeros(length(w),length(pfem));
v_rms = zeros(1,length(w));

for i = 1:length(w)
        u_fem(i,:) = (Kfem - (w(i)^2)*Mfem)\pfem;
        v_fem(i,:) = u_fem(i,:)*w(i)/(2*pi)*1000;
        v_rms(i) = log10(sqrt(sum(v_fem(i,:).^2)/length(pfem))); 
end

M_b_1_3 = [89.1, 112, 141,178,224,282, 355, 447, 562, 708, 891, 1122, 1413, 1778, 2239, 2818] ;%;;, 3548, 4467, 5623, 7079, 8913, 11220];

figure(1)
hold on
grid on
plot(1:1:2000,v_rms_cb,'LineWidth',1.5)
for i = 1:length(frec_nat)
    xline(frec_nat(i)/(2*pi),':','Color','r','LineWidth',1.5)
end 
hold off

figure(2)
hold on
grid on
plot(1:1:2000,v_rms,'LineWidth',1.5)
for i = 1:length(frec_nat)
    xline(frec_nat(i)/(2*pi),':','Color','r','LineWidth',1.5)
end 
hold off

figure(3)
hold on
grid on
colors = ["blue", "yellow"];

cc=1;
for i = 1:15
    if cc ==3
        cc=1;
    end
    x_ecl = [M_b_1_3(i), M_b_1_3(i+1), M_b_1_3(i+1), M_b_1_3(i)];
    y_ecl = [-1e20, -1e20, log10(max(v_rms)), log10(max(v_rms))];
    patch(x_ecl,10.^y_ecl, colors(cc),'EdgeColor','none','FaceAlpha',.2)
    cc = cc+1;
end
plot(1:1:2000,v_rms_cb,'LineWidth',1.5,'Color','r')
plot(1:1:2000,v_rms,'LineWidth',1.5,'Color','b','LineStyle','--')

hold off

figure(7)
hold on
grid on
colors = ["blue", "yellow"];

cc=1;
for i = 1:15
    if cc ==3
        cc=1;
    end
    x_ecl = [M_b_1_3(i), M_b_1_3(i+1), M_b_1_3(i+1), M_b_1_3(i)];
    y_ecl = [-1e20, -1e20, log10(max(v_RMS)), log10(max(v_RMS))];
    patch(x_ecl,10.^y_ecl, colors(cc),'EdgeColor','none','FaceAlpha',.2)
    cc = cc+1;
end
plot(w,v_RMS_CB,'LineWidth',1.5,'Color','r')
plot(w,v_RMS,'LineWidth',1.5,'Color','b','LineStyle','--')
ylim([0,6])
xlim([0, 2000])
hold off




function [MASS,STIFFNESS,nodes] = ReadPunchFile_n(punchfile,dof)

%READUNCHFILE_ND Read Mass and Stiffness matrices from punch file generated by MSC Nastran.
%    [MASS,STIFFNESS,nodes] = ReadPunchFile_nD(punchfile,dof) reads data from a Nastran punch file
%    'punchfile' providing the MASS and STIFFNESS matrices on the degrees of freedom 'dof' ordered as the array 'nodes'
%    and for each node as ordered in 'dof'
%
%	 * IMPORTANT NOTE *
%	 Node numbers should be above 6 (1 from 6 reserved for degrees of freedom)
%
disp(['Reading Mass and Stiffness Matrices from file ' punchfile(1:find(punchfile=='.')-1)]);
% -------------------------------------------------------------------------
% FIND OUT THE START AND END OF THE MASS MATRIX SECTION
% -------------------------------------------------------------------------
file=textread(punchfile,'%s','delimiter','\n','whitespace','');
found_start = 0;
found_end = 0;
pos=0;
%
while found_start==0 || found_end==0,
    pos=pos+1;
    if file{pos}(1)=='D',
        if file{pos}(1:12)=='DMIG*   MAAX';
            % First row of Mass Matrix section starts with 'DMIG*   MAAX'
            if found_start==0,
                found_start=1;
                startline=pos;
            end
        end
        if file{pos}(1:12)=='DTI     TUG1';
            % First row AFTER Mass Matrix section starts with 'DMIG    VAX'
            found_end=1;
            endline=pos-1;
        end
    end
end

% READ OF THE MASS MATRIX SECTION
[col1,col2,col3,col4] = textread(punchfile,'%s%s%u%f',endline-startline+1,'delimiter',' ','headerlines',startline-1);
% For each data row and columns of the Mass Matrix are defined and stored
% into MASS
nodes_aux = col3(find(col3>6));
nodes = unique(nodes_aux);
Ndof = length(nodes)*length(dof);
MASS = zeros(Ndof,Ndof);
h1 = waitbar(0,'Reading mass matrix');
for p=1:length(col3),
   waitbar(p/length(col3),h1);
   if(ismember(col3(p),nodes)),

        % Start line for new node
        n=find(nodes==col3(p));
        row = length(dof)*(n-1)+find(dof==col4(p));
   else
        
        % Set of columns for previous node
        n=find(nodes==str2num(cell2mat(col2(p))));
        column = length(dof)*(n-1)+find(dof==col3(p));
        value=col4(p);
        MASS(row,column)=value;
        if row~=column,
            MASS(column,row)=value;
        end
   end
end
close(h1);
% FIND OUT THE START AND END OF THE STIFFNESS MATRIX SECTION
% -------------------------------------------------------------------------
file=textread(punchfile,'%s','delimiter','\n','whitespace','');
found_start = 0;
found_end = 0;
pos=0;
while found_start==0 || found_end==0,
    pos=pos+1;
    if file{pos}(1)=='D',
        if file{pos}(1:12)=='DMIG*   KAAX';
            % First row of Stiffness Matrix section starts with 'DMIG*   KAAX'
            if found_start==0,
                found_start=1;
                startline=pos;
            end
        end
        if file{pos}(1:12)=='DMIG    MAAX';
            % First row AFTER Stiffness Matrix section starts with 'DMIG    MAAX'
            found_end=1;
            endline=pos-1;
        end
    end
end
% READ OF THE STIFFNESS MATRIX FILE SECTION
[col1,col2,col3,col4] = textread(punchfile,'%s%s%u%f',endline-startline+1,'delimiter',' ','headerlines',startline-1);
% For each data row and columns of the Mass Matrix are defined and stored into STIFFNESS
STIFFNESS = zeros(Ndof,Ndof);
h2 = waitbar(0,'Reading stiffness matrix');
for p=1:length(col3),
   waitbar(p/length(col3),h2);
   if(ismember(col3(p),nodes)),

        % Start line for new node
        n=find(nodes==col3(p));
        row = length(dof)*(n-1)+find(dof==col4(p));
   else

        % Set of columns for previous node
        n=find(nodes==str2num(cell2mat(col2(p))));
        column = length(dof)*(n-1)+find(dof==col3(p));
        value=col4(p);
        STIFFNESS(row,column)=value;
        if row~=column,
            STIFFNESS(column,row)=value;
        end
   end
end
close(h2);
end


